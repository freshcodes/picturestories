{"version":3,"sources":["webpack:///./components/story-board/index.js","webpack:///../node_modules/lz-string/libs/lz-string.js","webpack:///./lib/getSymbols.js","webpack:///./routes/story/style.css","webpack:///./components/hieroglyph/index.js","webpack:///./components/hieroglyph/style.css","webpack:///./components/story-board/style.css","webpack:///./routes/story/index.js","webpack:///./lib/hieroglyphs.js"],"names":["StoryBoard","Component","onGlyphClick","glyph","index","this","props","render","glyphs","map","key","num","event","emptyMessage","class","style","storyboard","length","LZString","getBaseValue","alphabet","character","baseReverseDic","i","charAt","f","String","fromCharCode","keyStrBase64","keyStrUriSafe","compressToBase64","input","res","_compress","a","decompressFromBase64","_decompress","compressToUTF16","decompressFromUTF16","compressed","charCodeAt","compressToUint8Array","uncompressed","compress","buf","Uint8Array","TotalLen","current_value","decompressFromUint8Array","decompress","Array","result","forEach","c","push","join","compressToEncodedURIComponent","decompressFromEncodedURIComponent","replace","bitsPerChar","getCharFromInt","value","ii","context_dictionary","context_dictionaryToCreate","context_c","context_wc","context_w","context_enlargeIn","context_dictSize","context_numBits","context_data","context_data_val","context_data_position","Object","prototype","hasOwnProperty","call","Math","pow","resetValue","getNextValue","w","bits","resb","maxpower","power","dictionary","enlargeIn","dictSize","numBits","entry","data","val","position","define","module","exports","string","output","charCode","slice","type","hieroglyph","onClick","str","Story","state","componentDidMount","window","location","search","substring","codes","split","code","parseInt","hieroglyphs","glyphsFromCodesArray","setState","story","glyphsFromIntRange","range","arr","l","end","start","hex","toString","strFromHex","fromCodePoint","categories","name","overallRange","exclusionRange","glyphsByCategoryName","categoryObj","filter","category","areCharactersInRange","chars","symbols","getSymbols","isCharaterInRange","isCharacterInRange","char","codePoint","codePointAt","randomCharacterInRange","floor","random"],"mappings":"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","file":"route-story.chunk.bfcea.esm.js","sourcesContent":["import { h, Component } from 'preact'\nimport style from './style.css'\n\nimport Hieroglyph from '../hieroglyph'\n\nexport default class StoryBoard extends Component {\n  onGlyphClick = (glyph, index) => {\n    if (this.props.onGlyphClick) this.props.onGlyphClick(glyph, index)\n  }\n\n  render () {\n    const glyphs = (this.props.glyphs || []).map((glyph, index) => <Hieroglyph key={glyph.num} index={index} onGlyphClick={(event) => this.onGlyphClick(glyph, index)} glyph={glyph} />)\n    const emptyMessage = <p>{this.props.emptyMessage}</p>\n    return (\n      <div class={style.storyboard}>\n        {glyphs.length ? glyphs : emptyMessage}\n      </div>\n    )\n  }\n}\n","// Copyright (c) 2013 Pieroxy <pieroxy@pieroxy.net>\n// This work is free. You can redistribute it and/or modify it\n// under the terms of the WTFPL, Version 2\n// For more information see LICENSE.txt or http://www.wtfpl.net/\n//\n// For more information, the home page:\n// http://pieroxy.net/blog/pages/lz-string/testing.html\n//\n// LZ-based compression algorithm, version 1.4.4\nvar LZString = (function() {\n\n// private property\nvar f = String.fromCharCode;\nvar keyStrBase64 = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\nvar keyStrUriSafe = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$\";\nvar baseReverseDic = {};\n\nfunction getBaseValue(alphabet, character) {\n  if (!baseReverseDic[alphabet]) {\n    baseReverseDic[alphabet] = {};\n    for (var i=0 ; i<alphabet.length ; i++) {\n      baseReverseDic[alphabet][alphabet.charAt(i)] = i;\n    }\n  }\n  return baseReverseDic[alphabet][character];\n}\n\nvar LZString = {\n  compressToBase64 : function (input) {\n    if (input == null) return \"\";\n    var res = LZString._compress(input, 6, function(a){return keyStrBase64.charAt(a);});\n    switch (res.length % 4) { // To produce valid Base64\n    default: // When could this happen ?\n    case 0 : return res;\n    case 1 : return res+\"===\";\n    case 2 : return res+\"==\";\n    case 3 : return res+\"=\";\n    }\n  },\n\n  decompressFromBase64 : function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrBase64, input.charAt(index)); });\n  },\n\n  compressToUTF16 : function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 15, function(a){return f(a+32);}) + \" \";\n  },\n\n  decompressFromUTF16: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 16384, function(index) { return compressed.charCodeAt(index) - 32; });\n  },\n\n  //compress into uint8array (UCS-2 big endian format)\n  compressToUint8Array: function (uncompressed) {\n    var compressed = LZString.compress(uncompressed);\n    var buf=new Uint8Array(compressed.length*2); // 2 bytes per character\n\n    for (var i=0, TotalLen=compressed.length; i<TotalLen; i++) {\n      var current_value = compressed.charCodeAt(i);\n      buf[i*2] = current_value >>> 8;\n      buf[i*2+1] = current_value % 256;\n    }\n    return buf;\n  },\n\n  //decompress from uint8array (UCS-2 big endian format)\n  decompressFromUint8Array:function (compressed) {\n    if (compressed===null || compressed===undefined){\n        return LZString.decompress(compressed);\n    } else {\n        var buf=new Array(compressed.length/2); // 2 bytes per character\n        for (var i=0, TotalLen=buf.length; i<TotalLen; i++) {\n          buf[i]=compressed[i*2]*256+compressed[i*2+1];\n        }\n\n        var result = [];\n        buf.forEach(function (c) {\n          result.push(f(c));\n        });\n        return LZString.decompress(result.join(''));\n\n    }\n\n  },\n\n\n  //compress into a string that is already URI encoded\n  compressToEncodedURIComponent: function (input) {\n    if (input == null) return \"\";\n    return LZString._compress(input, 6, function(a){return keyStrUriSafe.charAt(a);});\n  },\n\n  //decompress from an output of compressToEncodedURIComponent\n  decompressFromEncodedURIComponent:function (input) {\n    if (input == null) return \"\";\n    if (input == \"\") return null;\n    input = input.replace(/ /g, \"+\");\n    return LZString._decompress(input.length, 32, function(index) { return getBaseValue(keyStrUriSafe, input.charAt(index)); });\n  },\n\n  compress: function (uncompressed) {\n    return LZString._compress(uncompressed, 16, function(a){return f(a);});\n  },\n  _compress: function (uncompressed, bitsPerChar, getCharFromInt) {\n    if (uncompressed == null) return \"\";\n    var i, value,\n        context_dictionary= {},\n        context_dictionaryToCreate= {},\n        context_c=\"\",\n        context_wc=\"\",\n        context_w=\"\",\n        context_enlargeIn= 2, // Compensate for the first entry which should not count\n        context_dictSize= 3,\n        context_numBits= 2,\n        context_data=[],\n        context_data_val=0,\n        context_data_position=0,\n        ii;\n\n    for (ii = 0; ii < uncompressed.length; ii += 1) {\n      context_c = uncompressed.charAt(ii);\n      if (!Object.prototype.hasOwnProperty.call(context_dictionary,context_c)) {\n        context_dictionary[context_c] = context_dictSize++;\n        context_dictionaryToCreate[context_c] = true;\n      }\n\n      context_wc = context_w + context_c;\n      if (Object.prototype.hasOwnProperty.call(context_dictionary,context_wc)) {\n        context_w = context_wc;\n      } else {\n        if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n          if (context_w.charCodeAt(0)<256) {\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<8 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          } else {\n            value = 1;\n            for (i=0 ; i<context_numBits ; i++) {\n              context_data_val = (context_data_val << 1) | value;\n              if (context_data_position ==bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = 0;\n            }\n            value = context_w.charCodeAt(0);\n            for (i=0 ; i<16 ; i++) {\n              context_data_val = (context_data_val << 1) | (value&1);\n              if (context_data_position == bitsPerChar-1) {\n                context_data_position = 0;\n                context_data.push(getCharFromInt(context_data_val));\n                context_data_val = 0;\n              } else {\n                context_data_position++;\n              }\n              value = value >> 1;\n            }\n          }\n          context_enlargeIn--;\n          if (context_enlargeIn == 0) {\n            context_enlargeIn = Math.pow(2, context_numBits);\n            context_numBits++;\n          }\n          delete context_dictionaryToCreate[context_w];\n        } else {\n          value = context_dictionary[context_w];\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n\n\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        // Add wc to the dictionary.\n        context_dictionary[context_wc] = context_dictSize++;\n        context_w = String(context_c);\n      }\n    }\n\n    // Output the code for w.\n    if (context_w !== \"\") {\n      if (Object.prototype.hasOwnProperty.call(context_dictionaryToCreate,context_w)) {\n        if (context_w.charCodeAt(0)<256) {\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<8 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        } else {\n          value = 1;\n          for (i=0 ; i<context_numBits ; i++) {\n            context_data_val = (context_data_val << 1) | value;\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = 0;\n          }\n          value = context_w.charCodeAt(0);\n          for (i=0 ; i<16 ; i++) {\n            context_data_val = (context_data_val << 1) | (value&1);\n            if (context_data_position == bitsPerChar-1) {\n              context_data_position = 0;\n              context_data.push(getCharFromInt(context_data_val));\n              context_data_val = 0;\n            } else {\n              context_data_position++;\n            }\n            value = value >> 1;\n          }\n        }\n        context_enlargeIn--;\n        if (context_enlargeIn == 0) {\n          context_enlargeIn = Math.pow(2, context_numBits);\n          context_numBits++;\n        }\n        delete context_dictionaryToCreate[context_w];\n      } else {\n        value = context_dictionary[context_w];\n        for (i=0 ; i<context_numBits ; i++) {\n          context_data_val = (context_data_val << 1) | (value&1);\n          if (context_data_position == bitsPerChar-1) {\n            context_data_position = 0;\n            context_data.push(getCharFromInt(context_data_val));\n            context_data_val = 0;\n          } else {\n            context_data_position++;\n          }\n          value = value >> 1;\n        }\n\n\n      }\n      context_enlargeIn--;\n      if (context_enlargeIn == 0) {\n        context_enlargeIn = Math.pow(2, context_numBits);\n        context_numBits++;\n      }\n    }\n\n    // Mark the end of the stream\n    value = 2;\n    for (i=0 ; i<context_numBits ; i++) {\n      context_data_val = (context_data_val << 1) | (value&1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data_position = 0;\n        context_data.push(getCharFromInt(context_data_val));\n        context_data_val = 0;\n      } else {\n        context_data_position++;\n      }\n      value = value >> 1;\n    }\n\n    // Flush the last char\n    while (true) {\n      context_data_val = (context_data_val << 1);\n      if (context_data_position == bitsPerChar-1) {\n        context_data.push(getCharFromInt(context_data_val));\n        break;\n      }\n      else context_data_position++;\n    }\n    return context_data.join('');\n  },\n\n  decompress: function (compressed) {\n    if (compressed == null) return \"\";\n    if (compressed == \"\") return null;\n    return LZString._decompress(compressed.length, 32768, function(index) { return compressed.charCodeAt(index); });\n  },\n\n  _decompress: function (length, resetValue, getNextValue) {\n    var dictionary = [],\n        next,\n        enlargeIn = 4,\n        dictSize = 4,\n        numBits = 3,\n        entry = \"\",\n        result = [],\n        i,\n        w,\n        bits, resb, maxpower, power,\n        c,\n        data = {val:getNextValue(0), position:resetValue, index:1};\n\n    for (i = 0; i < 3; i += 1) {\n      dictionary[i] = i;\n    }\n\n    bits = 0;\n    maxpower = Math.pow(2,2);\n    power=1;\n    while (power!=maxpower) {\n      resb = data.val & data.position;\n      data.position >>= 1;\n      if (data.position == 0) {\n        data.position = resetValue;\n        data.val = getNextValue(data.index++);\n      }\n      bits |= (resb>0 ? 1 : 0) * power;\n      power <<= 1;\n    }\n\n    switch (next = bits) {\n      case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n        c = f(bits);\n        break;\n      case 2:\n        return \"\";\n    }\n    dictionary[3] = c;\n    w = c;\n    result.push(c);\n    while (true) {\n      if (data.index > length) {\n        return \"\";\n      }\n\n      bits = 0;\n      maxpower = Math.pow(2,numBits);\n      power=1;\n      while (power!=maxpower) {\n        resb = data.val & data.position;\n        data.position >>= 1;\n        if (data.position == 0) {\n          data.position = resetValue;\n          data.val = getNextValue(data.index++);\n        }\n        bits |= (resb>0 ? 1 : 0) * power;\n        power <<= 1;\n      }\n\n      switch (c = bits) {\n        case 0:\n          bits = 0;\n          maxpower = Math.pow(2,8);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 1:\n          bits = 0;\n          maxpower = Math.pow(2,16);\n          power=1;\n          while (power!=maxpower) {\n            resb = data.val & data.position;\n            data.position >>= 1;\n            if (data.position == 0) {\n              data.position = resetValue;\n              data.val = getNextValue(data.index++);\n            }\n            bits |= (resb>0 ? 1 : 0) * power;\n            power <<= 1;\n          }\n          dictionary[dictSize++] = f(bits);\n          c = dictSize-1;\n          enlargeIn--;\n          break;\n        case 2:\n          return result.join('');\n      }\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n      if (dictionary[c]) {\n        entry = dictionary[c];\n      } else {\n        if (c === dictSize) {\n          entry = w + w.charAt(0);\n        } else {\n          return null;\n        }\n      }\n      result.push(entry);\n\n      // Add w+entry[0] to the dictionary.\n      dictionary[dictSize++] = w + entry.charAt(0);\n      enlargeIn--;\n\n      w = entry;\n\n      if (enlargeIn == 0) {\n        enlargeIn = Math.pow(2, numBits);\n        numBits++;\n      }\n\n    }\n  }\n};\n  return LZString;\n})();\n\nif (typeof define === 'function' && define.amd) {\n  define(function () { return LZString; });\n} else if( typeof module !== 'undefined' && module != null ) {\n  module.exports = LZString\n}\n","// https://mathiasbynens.be/notes/javascript-unicode#iterating-over-symbols\nfunction getSymbols (string) {\n  let index = 0\n  const length = string.length\n  const output = []\n  for (; index < length - 1; ++index) {\n    let charCode = string.charCodeAt(index)\n    if (charCode >= 0xD800 && charCode <= 0xDBFF) {\n      charCode = string.charCodeAt(index + 1)\n      if (charCode >= 0xDC00 && charCode <= 0xDFFF) {\n        output.push(string.slice(index, index + 2))\n        ++index\n        continue\n      }\n    }\n    output.push(string.charAt(index))\n  }\n  output.push(string.charAt(index))\n  return output\n}\n\nmodule.exports = getSymbols\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"story\":\"story__3ghT0\"};","import { h } from 'preact'\nimport style from './style.css'\n\nexport default function ({ glyph, index, onGlyphClick }) {\n  onGlyphClick = onGlyphClick || function () {}\n  return (\n    <button type='button' class={style.hieroglyph + ' hieroglyph'} onClick={(event) => onGlyphClick(glyph, index)}>{glyph.str}</button>\n  )\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"hieroglyph\":\"hieroglyph__TTQoI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"storyboard\":\"storyboard__1DR4y\"};","import { h, Component } from 'preact'\nimport LZString from 'lz-string'\nimport style from './style.css'\nimport hieroglyphs from '../../lib/hieroglyphs.js'\n\nimport StoryBoard from '../../components/story-board'\n\nexport default class Story extends Component {\n  state = {\n    glyphs: []\n  }\n\n  componentDidMount () {\n    const compressed = window.location.search.substring(1)\n    const codes = LZString.decompressFromEncodedURIComponent(compressed).split(',').map(code => parseInt(code, 10))\n    const glyphs = hieroglyphs.glyphsFromCodesArray(codes)\n    this.setState({ glyphs })\n  }\n\n  render () {\n    return (\n      <main class={style.story}>\n        <StoryBoard glyphs={this.state.glyphs} emptyMessage='Loading...' />\n      </main>\n    )\n  }\n}\n","import getSymbols from './getSymbols'\n\n// https://en.wikipedia.org/wiki/Gardiner%27s_sign_list\nconst categories = [\n  {\n    name: 'Man and his occupations',\n    codes: { start: 77824, end: 77903 } // 1300 - 1304f\n  },\n  {\n    name: 'Woman and her occupations',\n    codes: { start: 77904, end: 77914 } // 13050 - 1305a\n  },\n  {\n    name: 'Anthropomorphic deities',\n    codes: { start: 77915, end: 77941 } // 1305b - 13075\n  },\n  {\n    name: 'Parts of the human body',\n    codes: { start: 77942, end: 78024 } // 13076 - 130c8\n  },\n  // There is a chunk of characters that seem to be unclassified (not even in the unclassified classification) here: 130c9 - 130d1\n  {\n    name: 'Mammals',\n    codes: { start: 78034, end: 78077 } // 130d2 - 130fd\n  },\n  {\n    name: 'Parts of mammals',\n    codes: { start: 78078, end: 78142 } // 130fe - 1313e\n  },\n  {\n    name: 'Birds',\n    codes: { start: 78143, end: 78206 } // 1313f - 1317e\n  },\n  {\n    name: 'Parts of birds',\n    codes: { start: 78207, end: 78215 } // 1317f - 13187\n  },\n  {\n    name: 'Amphibious animals, reptiles, etc.',\n    codes: { start: 78216, end: 78234 } // 13188 - 1319a\n  },\n  {\n    name: 'Fish and parts of fish',\n    codes: { start: 78235, end: 78242 } // 1319b - 131a2\n  },\n  {\n    name: 'Invertebrates and lesser animals',\n    codes: { start: 78243, end: 78252 } // 131a3 - 131ac\n  },\n  {\n    name: 'Trees and plants',\n    codes: { start: 78253, end: 78318 } // 131ad - 131ee\n  },\n  {\n    name: 'Sky, earth, water',\n    codes: { start: 78319, end: 78415 } // 131ef - 1324f\n  },\n  {\n    name: 'Buildings, parts of buildings, etc.',\n    codes: { start: 78416, end: 78490 } // 13250 - 1329a\n  },\n  {\n    name: 'Ships and parts of ships',\n    codes: { start: 78491, end: 78503 } // 1329b - 132a7\n  },\n  {\n    name: 'Domestics and funerary furniture',\n    codes: { start: 78504, end: 78510 } // 132a8 - 132ae\n  },\n  {\n    name: 'Temple furniture and sacred emblems',\n    codes: { start: 78511, end: 78544 } // 132af - 132d0\n  },\n  {\n    name: 'Crowns, dress, staves, etc.',\n    codes: { start: 78545, end: 78598 } // 132d1 - 13306\n  },\n  {\n    name: 'Warfare, hunting, and butchery',\n    codes: { start: 78599, end: 78642 } // 13307 - 13332\n  },\n  {\n    name: 'Agriculture, crafts, and professions',\n    codes: { start: 78643, end: 78689 } // 13333 - 13361\n  },\n  {\n    name: 'Rope, fiber, baskets, bags, etc.',\n    codes: { start: 78690, end: 78766 } // 13362 - 133ae\n  },\n  {\n    name: 'Vessels of stone and earthenware',\n    codes: { start: 78767, end: 78798 } // 133af - 133ce\n  },\n  {\n    name: 'Loaves and cakes',\n    codes: { start: 78799, end: 78810 } // 133cf - 133da\n  },\n  {\n    name: 'Writings, games, music',\n    codes: { start: 78811, end: 78819 } // 133db - 133e3\n  },\n  {\n    name: 'Strokes, signs derived from Hieratic, geometrical figures',\n    codes: { start: 78820, end: 78860 } // 133e4 - 1340c\n  },\n  {\n    name: 'Unclassified',\n    codes: { start: 78861, end: 78879 } // 1340d - 1341f\n  }\n]\n\nconst overallRange = { start: 77824, end: 78879 }\nconst exclusionRange = { start: 78025, end: 78033 }\n\nfunction randomCharacterInRange () {\n  const codePoint = Math.floor(Math.random() * (overallRange.end - overallRange.start)) + overallRange.start\n  if (codePoint > exclusionRange.start && codePoint < exclusionRange.end) return randomCharacterInRange()\n  else {\n    return strFromHex(codePoint.toString(16))\n  }\n}\n\nfunction glyphsFromIntRange (range) {\n  const arr = []\n  for (let i = 0, l = range.end - range.start; i <= l; i++) {\n    const num = i + range.start\n    const hex = num.toString(16)\n    const str = strFromHex(hex)\n    arr.push({ num, hex, str })\n  }\n  return arr\n}\n\nfunction glyphsFromCodesArray (codes) {\n  return codes.map((num) => {\n    const hex = num.toString(16)\n    const str = strFromHex(hex)\n    return { num, hex, str }\n  })\n}\n\nfunction glyphsByCategoryName (name) {\n  const categoryObj = categories.filter((category) => category.name === name)\n  return !categoryObj ? [] : glyphsFromIntRange(categoryObj[0].codes)\n}\n\nfunction areCharactersInRange (chars) {\n  const symbols = getSymbols(chars)\n  for (let i = 0; i <= symbols.length; ++i) {\n    if (!this.isCharaterInRange(symbols[i])) return false\n  }\n  return true\n}\n\nfunction isCharacterInRange (char) {\n  const codePoint = char.codePointAt(0)\n  return (codePoint >= overallRange.start && codePoint < exclusionRange.start) || (codePoint > exclusionRange.end && codePoint <= overallRange.end)\n}\n\nfunction strFromHex (hex) {\n  return String.fromCodePoint(`0x${hex}`)\n}\n\nexport default {\n  glyphsByCategoryName,\n  areCharactersInRange,\n  isCharacterInRange,\n  glyphsFromIntRange,\n  glyphsFromCodesArray,\n  strFromHex,\n  randomCharacterInRange,\n  categories\n}\n"],"sourceRoot":""}